get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
res$json(user_db)
req$json()
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
res$json(user_db)
req$method
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
res$json(user_db)
cat(req$method)
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
## run a server
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
res$json(user_db)
print(req$method)
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
# res$json(user_db)
req$method
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
# res$json(user_db)
req$headers
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
# res$json(user_db)
res$json(req$headers)
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
# res$json(user_db)
res$json(req$body)
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
# res$json(user_db)
res$json(req$headers)
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
## run a server
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
# res$json(user_db)
# res$json(req$headers)
res$json(req$REMOVE_ADDR)
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
## run a server
jug() %>%
get("/", function(req, res, err){
users = c("Sally", "Tom")
values = c(4.6, 7.2)
user_db = data.frame(users, values)
# msg = data.frame(msg = "Hello World")
# res$json(msg)
# res$json(user_db)
# res$json(req$headers)
res$json(req$REMOTE_ADDR)
}) %>%
simple_error_handler_json() %>%
serve_it(verbose = TRUE)
options(stringsAsFactors = FALSE)
library(rvest)
page = html("http://colleges.startclass.com/l/1887/Bentley-University")
page = read_html("http://colleges.startclass.com/l/1887/Bentley-University")
library(neoimportR)
neo_stop()
neo_wipe()
neo_start()
neo_start
neo_start()
neo_stop()
neo_start()
neo_stop()
neo_start()
neo_wipe()
neo_start()
library(cwl)
ch = connect_redshift()
ch_sf = connect_salesforce()
options(stringsAsFactors = FALSE)
library(stringr)
library(readxl)
edata = read_excel("~/Downloads/enrollment-data.xlsx")
glimpse(edata)
library(dplyr)
glimpse(edata)
colnames(edata) = c("email", "enrollmentdate")
glimpse(edata)
## parse out the year
tmp = edata %>% transform(enrollmentyear = str_extract(enrollmentdate, [0-9]{4}))
## parse out the year
tmp = edata %>% transform(enrollmentyear = str_extract(enrollmentdate, "[0-9]{4}"))
glimpse(tmp)
## parse out the year
edata = edata %>% transform(enrollmentyear = str_extract(enrollmentdate, "[0-9]{4}"))
## parse out the month
tmp = edata %>% transform(enrollmentmonth = str_extract(enrollmentdate, "[A-Za-z]"))
glimpse(tmp)
## parse out the month
tmp = edata %>% transform(enrollmentmonth = str_extract(enrollmentdate, "[A-Za-z].*"))
glimpse(tmp)
## parse out the month
tmp = edata %>% transform(enrollmentmonth = str_extract(enrollmentdate, "[A-Za-z]+"))
glimpse(tmp)
## parse out the month
edata = edata %>% transform(enrollmentmonth = str_extract(enrollmentdate, "[A-Za-z]+"))
glimpse(edata)
## write out csv file
write.csv(edata, file="~/Downloads/enrollment-date-parsed.csv", sep=",", row.names=F)
## write out csv file
write.csv(edata, file="~/Downloads/enrollment-date-parsed.csv", sep = ",", row.names=FALSE)
## write out csv file
write.csv(edata, file="~/Downloads/enrollment-date-parsed.csv", row.names=FALSE)
## write out csv file
write.csv(edata, file="~/Downloads/enrollment-date-parsed.csv", row.names=FALSE, na="")
edata = read_excel("~/Downloads/enrollment-data.xlsx")
edata = read_excel("~/Downloads/enrollment-data.xlsx")
edata = read_excel("~/Downloads/enrollment-data.xlsx")
glimpse(edata)
colnames(edata) = c("email", "attendeetype", "nationality", "enrollmentdate")
## parse out the year
edata = edata %>% transform(enrollmentyear = str_extract(enrollmentdate, "[0-9]{4}"))
## parse out the month
edata = edata %>% transform(enrollmentmonth = str_extract(enrollmentdate, "[A-Za-z]+"))
glimpse(edata)
## write out csv file
write.csv(edata, file="~/Downloads/enrollment-date-parsed.csv", row.names=FALSE, na="")
options(stringsAsFactors = FALSE)
library(readr)
library(dplyr)
## list the files
FILES = list.files("~/Downloads/findlay-search-outcomes")
## list the files
FILES = list.files("~/Downloads/findlay-search-outcomes", pattern = ".csv$")
FILES
library(stringr)
REPORTS = FILES[str_detect(FILES, "report_export")]
REPORTS
OPENS = FILES[str_detect(FILES, "export_opens")]
CLICKS = FILES[str_detect(FILES, "export_clicks")]
## for each click file, read and note the file
click_data = data.frame()
## list the files
FILES = list.files("~/Downloads/findlay-search-outcomes", pattern = ".csv$", full.names = TRUE)
OPENS = FILES[str_detect(FILES, "export_opens")]
CLICKS = FILES[str_detect(FILES, "export_clicks")]
CLICK = CLICKS[1]
tmp = read_csv(CLICK)
colnames(tmp) = tolower(gsub(" ", "_", colnames(tmp)))
colnames(tmp)
click_data = data.frame()
for (CLICK in CLICKS) {
tmp = read_csv(CLICK)
colnames(tmp) = tolower(gsub(" ", "_", colnames(tmp)))
click_data = bind_rows(click_data, tmp)
cat("finished ", CLICK, "\n")
}
glimpse(click_data)
length(unique(click_data$registrant_number))
click_data = data.frame()
for (CLICK in CLICKS) {
tmp = read_csv(CLICK)
colnames(tmp) = tolower(gsub(" ", "_", colnames(tmp)))
tmp$file = CLICK
click_data = bind_rows(click_data, tmp)
cat("finished ", CLICK, "\n")
}
glimpse(click_data)  ## 237
length(unique(click_data$registrant_number))  ## 184
library(janitor)
click_data %>% tabyl(file)
options(stringsAsFactors = FALSE)
library(readr)
library(readr)
library(readxl)
attends = read_excel("~/Downloads/CWL-Attendee-Term-Test.xlsx")
head(attends)
colnames(attends) = tolower(gsub(" ", "_", colnames(attends)))
glimpse(attends)
library(dplyr)
glimpse(attends)
library(janitor)
attends %>% tabyl(nationality)
us = attends %>% filter(nationality == 'UNITED STATES')
us %>% tabyl(anticipated_start_term)
attends = read_excel("~/Downloads/CWL-Attendee-Term-Test.xlsx", col_types = c("characater"))
glimpse(attends)
attends = read_excel("~/Downloads/CWL-Attendee-Term-Test.xlsx", col_types = c("text"))
library(readr)
attends = read_csv("~/Downloads/CWL-Attendee-Term-Test.csv")
spec(attends)
colnames(attends) = tolower(gsub(" ", "_", colnames(attends)))
glimpse(attends)
library(janitor)
attends %>% tabyl(nationality)
us = attends %>% filter(nationality == 'UNITED STATES')
us %>% tabyl(anticipated_start_term)
glimpse(us)
us %>% tabyl(anticipated_start_term)
library(stringr)
us %>% transform(enroll_year = str_extract(anticipated_start_term, "[0-9]{4}"))
us = us %>% transform(enroll_year = str_extract(anticipated_start_term, "[0-9]{4}"))
head(us)
us %>% tabyl(enroll_year)
options(stringsAsFactors = FALSE)
install.packages("googleAuthR")
library(googleAuthR)
# install.packages("googleAuthR")
# library(googleAuthR)
library(httr)
## build the url
API = paste0(API_ADDRESS, EP)
TOKEN = "008fc5741bfaa1e885147e30672d827f09c743f5"
API_ADDRESS = "https://api-ssl.bitly.com"
EP = "/v3/shorten?access_token=ACCESS_TOKEN&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API
library(stringr)
API = sprintf(API, TOKEN)
EP = "/v3/shorten?access_token=%s&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API = sprintf(API, TOKEN)
API
## URL to encode
PAGE = "https://www.collegeweeklive.com/"
URL = URLencode(PAGE)
URL
HIT = paste0(API, PAGE, "&format=json")
HIT
## make the request
resp = GET(HIT)
resp$status_code
resp
content(resp)
result
resultr = content(resp)
result = content(resp)
setwd("~/github")
library("urlshorteneR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
options(stringsAsFactors = FALSE)
## load the packages
library(cwl)
library(url)
library(urlshorteneR)
Sys.getenv()
status(resp)
resp$status_code
cat("status code was: ", resp$status_code, "\n")
## process the status code 200 results
shorty = content(resp)
shorty
bitly_shorten = function(TOKEN, PAGE) {
## for testing
# TOKEN = "008fc5741bfaa1e885147e30672d827f09c743f5"
# PAGE = "https://www.collegeweeklive.com/"
## set the values of interest
API_ADDRESS = "https://api-ssl.bitly.com"
EP = "/v3/shorten?access_token=%s&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API = sprintf(API, TOKEN)
## uncessary I think but encode page
URL = URLencode(PAGE)
HIT = paste0(API, PAGE, "&format=json")
## hit the api
resp = GET(HIT)
## if the status code is not 200, print status code and go
if (resp$status_code){
cat("status code was: ", resp$status_code, "\n")
next
}
## process the status code 200 results
shorty = content(resp)
## return the data
return shorty
}
bitly_shorten = function(TOKEN, PAGE) {
## for testing
# TOKEN = "008fc5741bfaa1e885147e30672d827f09c743f5"
# PAGE = "https://www.collegeweeklive.com/"
## set the values of interest
API_ADDRESS = "https://api-ssl.bitly.com"
EP = "/v3/shorten?access_token=%s&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API = sprintf(API, TOKEN)
## uncessary I think but encode page
URL = URLencode(PAGE)
HIT = paste0(API, PAGE, "&format=json")
## hit the api
resp = GET(HIT)
## if the status code is not 200, print status code and go
if (resp$status_code){
cat("status code was: ", resp$status_code, "\n")
next
}
## process the status code 200 results
shorty = content(resp)
## return the data
return shorty
}
bitly_shorten = function(TOKEN, PAGE) {
## for testing
# TOKEN = "008fc5741bfaa1e885147e30672d827f09c743f5"
# PAGE = "https://www.collegeweeklive.com/"
## set the values of interest
API_ADDRESS = "https://api-ssl.bitly.com"
EP = "/v3/shorten?access_token=%s&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API = sprintf(API, TOKEN)
## uncessary I think but encode page
URL = URLencode(PAGE)
HIT = paste0(API, PAGE, "&format=json")
## hit the api
resp = GET(HIT)
## if the status code is not 200, print status code and go
if (resp$status_code != 200) {
cat("status code was: ", resp$status_code, "\n")
next
}
## process the status code 200 results
shorty = content(resp)
## return the data
return shorty
}
## for testing
# TOKEN = "008fc5741bfaa1e885147e30672d827f09c743f5"
# PAGE = "https://www.collegeweeklive.com/"
## set the values of interest
API_ADDRESS = "https://api-ssl.bitly.com"
EP = "/v3/shorten?access_token=%s&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API = sprintf(API, TOKEN)
## uncessary I think but encode page
URL = URLencode(PAGE)
HIT = paste0(API, PAGE, "&format=json")
## hit the api
resp = GET(HIT)
## if the status code is not 200, print status code and go
if (resp$status_code != 200) {
cat("status code was: ", resp$status_code, "\n")
next
}
## process the status code 200 results
shorty = content(resp)
## return the data
return shorty
bitly_shorten = function(TOKEN, PAGE) {
## for testing
# TOKEN = "008fc5741bfaa1e885147e30672d827f09c743f5"
# PAGE = "https://www.collegeweeklive.com/"
## set the values of interest
API_ADDRESS = "https://api-ssl.bitly.com"
EP = "/v3/shorten?access_token=%s&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API = sprintf(API, TOKEN)
## uncessary I think but encode page
URL = URLencode(PAGE)
HIT = paste0(API, PAGE, "&format=json")
## hit the api
resp = GET(HIT)
## if the status code is not 200, print status code and go
if (resp$status_code != 200) {
cat("status code was: ", resp$status_code, "\n")
next
}
## process the status code 200 results
shorty = content(resp)
## return the data
return (shorty)
}
bitly_shorten = function(TOKEN, PAGE) {
## for testing
# TOKEN = "008fc5741bfaa1e885147e30672d827f09c743f5"
# PAGE = "https://www.collegeweeklive.com/"
## set the values of interest
API_ADDRESS = "https://api-ssl.bitly.com"
EP = "/v3/shorten?access_token=%s&longUrl="
## build the url
API = paste0(API_ADDRESS, EP)
API = sprintf(API, TOKEN)
## uncessary I think but encode page
URL = URLencode(PAGE)
HIT = paste0(API, PAGE, "&format=json")
## hit the api
resp = GET(HIT)
## if the status code is not 200, print status code and go
if (resp$status_code != 200) {
cat("status code was: ", resp$status_code, "\n")
next
}
## process the status code 200 results
shorty = content(resp)
## return the data
return (shorty)
}
bitly_shorten(TOKEN, PAGE)
library(dplyr)
install.packages(c("arules", "BH", "bindrcpp", "curl", "DBI", "dbplyr", "devtools", "dplyr", "git2r", "glue", "haven", "httr", "lazyeval", "lubridate", "mgcv", "modelr", "openssl", "psych", "purrr", "R6", "Rcpp", "rlang", "RMySQL", "rstudioapi", "scales", "tibble", "tidyr", "withr"))
library(cwl)
library(devtools)
getwd()
devtools::install("github")
devtools::install("cwl")
library(cwl)
library(plumber)
setwd("~/github/sf-plumber-api")
library(analogsea)
drop = droplet_create(name = "brocktest")
drop
library(plumber)
drop2 = do_provision(drop$id)
droplet_delete(drop$id)
do_provision()
drops = droplets()
droplet_delete(drops$id)
drops
droplet_delete(drops$OpaqueBases$id)
drops = droplets()
drops
do_provision()
do_provision(unstable=TRUE)
drops = droplets()
drops
do_provision(droplet = drops$GroaningPlurality$id, unstable = TRUE)
getwd()
drops
do_deploy_api(drops$GroaningPlurality, "plumbertest", "./api")
do_deploy_api(drops$GroaningPlurality, "plumbertest", "./api", 8000)
do_deploy_api(drops$GroaningPlurality, "plumbertest", "./api", 8001)
droplet_delete(drops$GroaningPlurality$id)
